name: Flutter CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  FLUTTER_VERSION: "3.32.5"
  JAVA_VERSION: "17"

jobs:
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Firebase config files
        env:
          FIREBASE_OPTIONS_DART: ${{ secrets.FIREBASE_OPTIONS_DART }}
          ANDROID_GOOGLE_SERVICES_JSON: ${{ secrets.ANDROID_GOOGLE_SERVICES_JSON }}
          IOS_GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.IOS_GOOGLE_SERVICE_INFO_PLIST }}
          MACOS_GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.MACOS_GOOGLE_SERVICE_INFO_PLIST }}
        run: |
          set -euo pipefail

          mkdir -p lib android/app ios/Runner macos/Runner

          if [ -z "$FIREBASE_OPTIONS_DART" ]; then
            echo "❌ FIREBASE_OPTIONS_DART secret is not set." >&2
            exit 1
          fi
          printf '%s' "$FIREBASE_OPTIONS_DART" | base64 --decode > lib/firebase_options.dart

          if [ -z "$ANDROID_GOOGLE_SERVICES_JSON" ]; then
            echo "❌ ANDROID_GOOGLE_SERVICES_JSON secret is not set." >&2
            exit 1
          fi
          printf '%s' "$ANDROID_GOOGLE_SERVICES_JSON" | base64 --decode > android/app/google-services.json

          if [ -z "$IOS_GOOGLE_SERVICE_INFO_PLIST" ]; then
            echo "❌ IOS_GOOGLE_SERVICE_INFO_PLIST secret is not set." >&2
            exit 1
          fi
          printf '%s' "$IOS_GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > ios/Runner/GoogleService-Info.plist

          if [ -n "$MACOS_GOOGLE_SERVICE_INFO_PLIST" ]; then
            printf '%s' "$MACOS_GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > macos/Runner/GoogleService-Info.plist
          else
            printf '%s' "$IOS_GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > macos/Runner/GoogleService-Info.plist
          fi

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Verify dependencies
        run: flutter pub deps

      - name: Generate code (build_runner)
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Run code analysis
        run: flutter analyze --no-fatal-infos

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: analyze
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Firebase config files
        env:
          FIREBASE_OPTIONS_DART: ${{ secrets.FIREBASE_OPTIONS_DART }}
          ANDROID_GOOGLE_SERVICES_JSON: ${{ secrets.ANDROID_GOOGLE_SERVICES_JSON }}
          IOS_GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.IOS_GOOGLE_SERVICE_INFO_PLIST }}
          MACOS_GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.MACOS_GOOGLE_SERVICE_INFO_PLIST }}
        run: |
          set -euo pipefail

          mkdir -p lib android/app ios/Runner macos/Runner

          if [ -z "$FIREBASE_OPTIONS_DART" ]; then
            echo "❌ FIREBASE_OPTIONS_DART secret is not set." >&2
            exit 1
          fi
          printf '%s' "$FIREBASE_OPTIONS_DART" | base64 --decode > lib/firebase_options.dart

          if [ -z "$ANDROID_GOOGLE_SERVICES_JSON" ]; then
            echo "❌ ANDROID_GOOGLE_SERVICES_JSON secret is not set." >&2
            exit 1
          fi
          printf '%s' "$ANDROID_GOOGLE_SERVICES_JSON" | base64 --decode > android/app/google-services.json

          if [ -z "$IOS_GOOGLE_SERVICE_INFO_PLIST" ]; then
            echo "❌ IOS_GOOGLE_SERVICE_INFO_PLIST secret is not set." >&2
            exit 1
          fi
          printf '%s' "$IOS_GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > ios/Runner/GoogleService-Info.plist

          if [ -n "$MACOS_GOOGLE_SERVICE_INFO_PLIST" ]; then
            printf '%s' "$MACOS_GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > macos/Runner/GoogleService-Info.plist
          else
            printf '%s' "$IOS_GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > macos/Runner/GoogleService-Info.plist
          fi

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Accept Android SDK licenses
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          echo "Android SDK licenses accepted"

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.tool_cache }}/flutter
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-
            ${{ runner.os }}-flutter-

      - name: Get dependencies
        run: flutter pub get

      - name: Generate code (build_runner)
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Build Android APK
        run: flutter build apk --release

      - name: Verify Android build
        run: |
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "✅ Android APK build successful"
            ls -la build/app/outputs/flutter-apk/
          else
            echo "❌ Android APK build failed"
            exit 1
          fi

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: analyze
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Firebase config files
        env:
          FIREBASE_OPTIONS_DART: ${{ secrets.FIREBASE_OPTIONS_DART }}
          ANDROID_GOOGLE_SERVICES_JSON: ${{ secrets.ANDROID_GOOGLE_SERVICES_JSON }}
          IOS_GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.IOS_GOOGLE_SERVICE_INFO_PLIST }}
          MACOS_GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.MACOS_GOOGLE_SERVICE_INFO_PLIST }}
        run: |
          set -euo pipefail

          mkdir -p lib android/app ios/Runner macos/Runner

          if [ -z "$FIREBASE_OPTIONS_DART" ]; then
            echo "❌ FIREBASE_OPTIONS_DART secret is not set." >&2
            exit 1
          fi
          printf '%s' "$FIREBASE_OPTIONS_DART" | base64 --decode > lib/firebase_options.dart

          if [ -z "$ANDROID_GOOGLE_SERVICES_JSON" ]; then
            echo "❌ ANDROID_GOOGLE_SERVICES_JSON secret is not set." >&2
            exit 1
          fi
          printf '%s' "$ANDROID_GOOGLE_SERVICES_JSON" | base64 --decode > android/app/google-services.json

          if [ -z "$IOS_GOOGLE_SERVICE_INFO_PLIST" ]; then
            echo "❌ IOS_GOOGLE_SERVICE_INFO_PLIST secret is not set." >&2
            exit 1
          fi
          printf '%s' "$IOS_GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > ios/Runner/GoogleService-Info.plist

          if [ -n "$MACOS_GOOGLE_SERVICE_INFO_PLIST" ]; then
            printf '%s' "$MACOS_GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > macos/Runner/GoogleService-Info.plist
          else
            printf '%s' "$IOS_GOOGLE_SERVICE_INFO_PLIST" | base64 --decode > macos/Runner/GoogleService-Info.plist
          fi

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.tool_cache }}/flutter
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-
            ${{ runner.os }}-flutter-

      - name: Get dependencies
        run: flutter pub get

      - name: Generate code (build_runner)
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Install iOS dependencies
        run: |
          cd ios
          pod install
          cd ..

      - name: Build iOS (no codesign)
        run: flutter build ios --release --no-codesign

      - name: Verify iOS build
        run: |
          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            echo "✅ iOS build successful"
            ls -la build/ios/iphoneos/
          else
            echo "❌ iOS build failed"
            exit 1
          fi

  # 테스트 job (미래 사용을 위해 준비)
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   needs: analyze
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         channel: "stable"
  #         cache: true
  #
  #     - name: Get dependencies
  #       run: flutter pub get
  #
  #     - name: Run tests
  #       run: flutter test --coverage
  #
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         file: coverage/lcov.info
