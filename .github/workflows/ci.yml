name: Flutter CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  FLUTTER_VERSION: "3.32.5"
  JAVA_VERSION: "11"

jobs:
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true # ← Flutter SDK 재사용으로 ~2분 절약

      - name: Get dependencies
        run: flutter pub get

      - name: Verify pub get
        run: flutter pub deps

      - name: Run code analysis
        run: flutter analyze --no-fatal-infos

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: analyze
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        build-target: [web, android]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Android 빌드에만 필요한 설정들 (매번 새로운 VM이므로 필수)
      - name: Setup Java (Android only)
        if: matrix.build-target == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      # 더 안정적인 Android SDK 설정 방법
      - name: Setup Android SDK (Android only)
        if: matrix.build-target == 'android'
        run: |
          set -e
          echo "Setting up Android SDK..."

          # Android 환경 변수 설정
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "/usr/local/lib/android/sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH

          # SDK Manager 확인
          which sdkmanager || echo "sdkmanager not found in PATH"
          ls -la /usr/local/lib/android/sdk/cmdline-tools/latest/bin/ || true

          # SDK 라이센스 자동 승인 (에러 무시)
          echo "Accepting Android SDK licenses..."
          yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager --licenses 2>/dev/null || true

          # 필수 SDK 컴포넌트 설치
          echo "Installing required Android SDK components..."
          /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-34" "build-tools;34.0.0" || true
          /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "ndk;27.0.12077973" || true

          echo "✅ Android SDK setup completed"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true # ← Flutter SDK 캐싱으로 설치 시간 단축

      # 의존성 캐싱으로 pub get 시간 대폭 단축
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.tool_cache }}/flutter
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-${{ env.FLUTTER_VERSION }}-
            ${{ runner.os }}-flutter-

      # Gradle 캐싱으로 Android 빌드 시간 단축
      - name: Cache Gradle (Android only)
        if: matrix.build-target == 'android'
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Get dependencies
        run: |
          flutter pub get
          flutter pub deps

          # pdfx 패키지 설치 확인
          echo "Checking installed packages..."
          flutter pub deps | grep -E "(pdfx|file_picker)" || true

      # PDF.js 설정 최적화: 의존성 확인 후 설치
      - name: Setup PDF.js for web (Web only)
        if: matrix.build-target == 'web'
        run: |
          echo "Checking PDF.js configuration..."

          # web/index.html이 이미 PDF.js를 포함하고 있는지 확인
          if [ -f "web/index.html" ] && grep -q "pdfjs-dist" web/index.html; then
            echo "✅ PDF.js already configured, skipping installation"
          else
            echo "📦 Installing PDF.js for web..."

            # pdfx 패키지가 있는지 확인
            if flutter pub deps | grep -q "pdfx"; then
              flutter pub run pdfx:install_web
              echo "✅ PDF.js setup completed"
            else
              echo "⚠️ pdfx package not found, skipping PDF.js installation"
              echo "This might be expected if PDF functionality is not yet implemented"
            fi
          fi

      - name: Verify web/index.html (Web only)
        if: matrix.build-target == 'web'
        run: |
          if [ -f "web/index.html" ]; then
            echo "✅ web/index.html exists"

            # PDF.js 설정이 있으면 확인, 없으면 경고만
            if grep -q "pdfjs-dist" web/index.html; then
              echo "✅ PDF.js scripts found in web/index.html"
            else
              echo "⚠️ PDF.js scripts not found in web/index.html"
              echo "This might be expected if PDF functionality is not implemented yet"
            fi
          else
            echo "❌ web/index.html not found"
            exit 1
          fi

      # Android는 이전 빌드 캐시 때문에 문제가 생길 수 있어서 clean
      - name: Clean Flutter (Android only)
        if: matrix.build-target == 'android'
        run: flutter clean

      - name: Build Web
        if: matrix.build-target == 'web'
        run: |
          echo "Building web application..."
          # Flutter 3.32.5에서 --web-renderer 옵션이 제거됨
          flutter build web --release
          echo "Web build completed"

      - name: Verify web build output (Web only)
        if: matrix.build-target == 'web'
        run: |
          if [ -d "build/web" ]; then
            echo "✅ Web build output exists"
            ls -la build/web/
          else
            echo "❌ Web build output not found"
            exit 1
          fi

      - name: Build Android APK
        if: matrix.build-target == 'android'
        run: |
          echo "Building Android APK..."

          # 환경 변수 재확인
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"

          # Flutter doctor로 Android 설정 확인
          flutter doctor -v

          # Android 빌드 시도
          flutter build apk --debug --verbose
          echo "Android APK build completed"

      - name: Verify Android build output (Android only)
        if: matrix.build-target == 'android'
        run: |
          if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
            echo "✅ Android APK exists"
            ls -la build/app/outputs/flutter-apk/
          else
            echo "❌ Android APK not found"
            exit 1
          fi

  # 테스트 job (미래 사용을 위해 준비)
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   needs: analyze
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         channel: "stable"
  #         cache: true
  #
  #     - name: Get dependencies
  #       run: flutter pub get
  #
  #     - name: Run tests
  #       run: flutter test --coverage
  #
  #     - name: Upload coverage to Codecov
  #       uses: codecov/codecov-action@v3
  #       with:
  #         file: coverage/lcov.info
